<?xml version="1.0" encoding="UTF-8" ?>
<Module>
  <ModulePrefs title="Recent Results for Custom City" title_url=""
		description="Recent results (last 10) for custom city" author="Indian Bridge"
		author_email="indianbridge+calendargadget@gmail.com" screenshot="" thumbnail=""
		height="400" scrolling="true">
    <Require feature="setprefs" />
  </ModulePrefs>
  <UserPref name="cityname" display_name="City for which Recent Results are needed" default_value="" />
  <UserPref name="linktodetails" display_name="Page where more events can be searched for" default_value="" />
  <Content type="html">
    <![CDATA[
		<script type="text/javascript" src="http://www.google.com/jsapi"></script>
		<div id="events">Loading Events...</div>        
	  <script type="text/javascript">
	    gadgets.util.registerOnLoadHandler(init);
	    function init() {
	        var today = new Date();
          prefs = new gadgets.Prefs();
          var cityName = prefs.getString("cityname");
	        var startDate = new Date(today.getTime() - (30 * 24 * 3600000));
          document.getElementById("events-header").innerHtml = "Last 10 Events held in "+(cityName?cityName:"India");
	    }
	    var months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
	    function dateToString(date) { return "" + months[date.getMonth()] + " " + date.getDate() + " " + date.getFullYear(); };
		  google.load("gdata", "1");
		  google.setOnLoadCallback(fetchEvents);
		function fetchEvents() {
		    document.getElementById('events').innerHTML = 'Loading Events...';
		    var cityName = prefs.getString("cityname");
		    var endDate = new Date();
		    var feedUri = 'https://www.google.com/calendar/feeds/indianbridge@gmail.com/public/full';
		    var calendarService = new google.gdata.calendar.CalendarService('Indian Bridge Calendar');
		    var query = new google.gdata.calendar.CalendarEventQuery(feedUri);
		    if (cityName) query.setFullTextQuery(cityName.toLowerCase());
		    query.setOrderBy("starttime");
		    query.setSortOrder("descending");
		    query.setSingleEvents(true);
		    query.setMaxResults(10);
		    if(endDate) query.setMaximumStartTime(new google.gdata.DateTime(calcIST_(endDate)));
		    calendarService.getEventsFeed(query, function (root) { handleSuccess(root, cityName); }, function (error) { handleError(error); });
		}
		function handleSuccess(root, cityName) {
		    var html = "";
		    html += makeTablePreamble_();
		    html += "<thead>";
		    html += makeTableHeader_(["Event Name", "Event Date", "Event Location"]);
		    html += "</thead><tbody>";
		    var eventEntries = root.feed.getEntries();
		    filteredEvents = new Array();
		    for (var i = 0; i < eventEntries.length; i++) {
		        var event = eventEntries[i];
		        var re = new RegExp(cityName, "i");
		        if (event.getLocations()[0].getValueString().search(re)!=-1) filteredEvents.push(event);
		    }

		    if (filteredEvents.length > 0) {
		        for (var i = 0; i < filteredEvents.length; i++) {
		            var event = filteredEvents[i];
		            var location = event.getLocations()[0].getValueString()
		            var resultsLink = getResultsURL(event);
                var startDate = event.getTimes()[0].getStartTime().getDate();
                var endDate = event.getTimes()[0].getEndTime().getDate();
		            html += "<tr>" + makeTableCell_([event.getTitle().getText(), getDateString(event), (resultsLink ? '<a target="_blank" href="' + resultsLink + '">Results</a>' : '<img title="Not Published" src="http://indianbridgefiles.appspot.com/images/publish_x.png" alt="Not Published"/>')], i) + "</tr>";
		        }
		        html += '</tbody></table>';
		    } else {
		        html = "<h2>No Events found matching selected criteria in Indian Bridge Calendar!!!</h2>";
		    }
        var linkToMore = prefs.getString("linktodetails");
        if(linkToMore) html+="<a onclick=\"self.parent.location.href='"+linkToMore+"'\" href="">View More Events & Results</a>";
		    document.getElementById('events').innerHTML = html;
		}
		function getDateString(event) {
		    var sd = event.getTimes()[0].getStartTime();
		    var ed = event.getTimes()[0].getEndTime();
		    var startDateStr = "";
		    var endDateStr = "";
		    if (sd.isDateOnly()) {
		        startDateStr = dateToString(sd.getDate());
		        var endDate = ed.getDate();
		        endDate = new Date(endDate.getTime() - 1000);
		        endDateStr = dateToString(endDate);
		    }
		    else {
		        startDateStr = dateToString(calcIST_(sd.getDate()));
		        endDateStr = dateToString(calcIST_(ed.getDate()));
		    }
		    return (startDateStr == endDateStr ? startDateStr : startDateStr + " - " + endDateStr);
		}
		function handleError(error) { document.getElementById('events').innerHTML = '<h4>' + error + '</h4>'; }
		function makeTablePreamble_() { return "<table style=\'font-size:small;width:100%;border: 1px solid #cef;text-align: left;\'>"; }
		function makeTableHeader_(text) { if (typeof (text) == "object") { var retVal = ""; for (var i = 0; i < text.length; ++i) retVal += makeTableHeader_(text[i]); return retVal; } else return "<th style=\'font-weight: bold;background-color: #acf;border-bottom: 1px solid #cef;padding: 0;\'>" + text + "</th>"; }
		function makeTableCell_(text, row) { if (typeof (text) == "object") { var retVal = ""; for (var i = 0; i < text.length; ++i) retVal += makeTableCell_(text[i], row); return retVal; } if (row % 2 == 0) return "<td style=\'padding: 0;background-color: #def; border-bottom: 1px solid #cef;\'>" + text + "</td>"; else return "<td style=\'padding: 0;\'>" + text + "</td>"; }
        function calcIST_(dStr) {
            if (!dStr) return null;
            var d = (typeof (dStr) == "string" ? new Date(Date.parse(dStr)) : dStr);
            utc = d.getTime() + (d.getTimezoneOffset() * 60000);
            nd = new Date(utc + (3600000 * 5.5));
            return nd;
        }
        function calcLocalDate_(dStr) {
            if (!dStr) return null;
            var d = (typeof (dStr) == "string" ? new Date(Date.parse(dStr)) : dStr);
            utc = d.getTime() - (3600000 * 5.5);
            nd = new Date(utc - (d.getTimezoneOffset() * 60000));
            return nd;
        }
		    function getResultsURL(event) {
		        var text = event.getContent().getText();
		        var patternString = "(result|results)\\s*:\\s*([^\\s\\n\\t\\f\\v\\0]*)";
		        var pattern = new RegExp(patternString, "i");
		        var match = pattern.exec(text);
		        if (match != null) {
		            var ret = (isURL(match[2]) ? match[2] : event.getHtmlLink().getHref());
		            return ret;
		        }
		        var patt1Str = "<a([^>]+)>\\s*(results|result)\\s*</a>";
		        var patt1 = new RegExp(patt1Str, "i");
		        var match = patt1.exec(text);
		        if (match == null) return null;
		        var patt2Str = "href\\s*=\\s*(\"([^\"]*)\"|'([^']*)'|([^'\">\\s]+))";
		        var patt2 = new RegExp(patt2Str, "i");
		        match = patt2.exec(match[1]);
		        if (match == null) return null;
		        if (typeof (match[3]) != "undefined") return match[3];
		        if (typeof (match[2]) != "undefined") return match[2];
		        if (typeof (match[1]) != "undefined") return match[1];
		        return null;
		    };
		    function isURL(s) {
		        var regexp = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/i;
		        return regexp.test(s);
		    };         
	</script>    
		]]>
  </Content>
</Module>