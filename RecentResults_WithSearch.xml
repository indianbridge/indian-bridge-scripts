<?xml version="1.0" encoding="UTF-8" ?> 
<Module>
	<ModulePrefs title="Recent Results for Custom City" title_url="" 
		description="Recent results (last month) for custom city" author="Indian Bridge" 
		author_email="indianbridge+calendargadget@gmail.com" screenshot="" thumbnail=""
		height="400" scrolling="true">
    <Require feature="setprefs" />
  </ModulePrefs> 
	<UserPref name="cityname" display_name="City for which Recent Results are needed" default_value="" />
	<Content type="html">
	<![CDATA[
<script type="text/javascript" src="http://www.google.com/jsapi"></script>
    <div id="search-parameters">
			<form id="search-form" NAME="myform" ACTION="" METHOD="GET"><BR>
				Search for Event with Name: <INPUT TYPE="text" NAME="searcheventname" VALUE="">
                between 
				Start Date: <INPUT id="searchstartdate" TYPE="text" NAME="searchstartdate" VALUE="">
				End Date: <INPUT id="searchenddate" TYPE="text" NAME="searchenddate" VALUE="">
				<INPUT TYPE="button" NAME="button" Value="Find Events" onclick="loadEventsWithDate(this.form);return false;">
			</FORM>
    </div>
		<div id="recent-results">Loading Recent Events...</div>   
<link rel="stylesheet" type="text/css" media="all" href="http://indianbridgefiles.appspot.com/ResultsSubmission/calendar.css" />
<script type="text/javascript" src="http://indianbridgefiles.appspot.com/ResultsSubmission/calendar.js"></script>         
		<script type="text/javascript">
		    new JsDatePick({ useMode: 2, target: "searchstartdate", dateFormat: "%Y-%m-%d" });
		    var today = new Date();
		    var startDate = new Date(today.getTime() - (30 * 24 * 3600000));
		    //document.getElementById("searchstartdate").value = startDate.toDateString();
		    //document.getElementById("searchenddate").value = today.toDateString();
		    google.load("gdata", "1");
		    google.setOnLoadCallback(runJSAPI);
		    var prefs = new gadgets.Prefs();
		    gadgets.util.registerOnLoadHandler(pageLoaded);
		    function pageLoaded() { pageLoaded = true; run(); }
		    function runJSAPI() { jsapiLoaded = true; run(); }
		    function run() {
		        if (!jsapiLoaded || !pageLoaded) return;
                loadEvents(document.getElementById('search-form'));

		    }
		    function loadEvents(form) {
		        var eventName = form.searcheventname.value;
		        var feedUri = 'https://www.google.com/calendar/feeds/indianbridge@gmail.com/public/full';
		        var calendarService = new google.gdata.calendar.CalendarService('Indian Bridge Calendar');
		        //var cityName = prefs.getString("cityname");
                cityName = "chennai";
		        var query = new google.gdata.calendar.CalendarEventQuery(feedUri);
		        if (cityName != "") query.setFullTextQuery(cityName);
		        query.setOrderBy("starttime");
		        query.setSortOrder("descending");
		        query.setSingleEvents(true);
		        query.setMaxResults(null);
		        var today = new Date();
		        var startDate = new Date(today.getTime() - (30 * 24 * 3600000));
		        query.setMinimumStartTime(new google.gdata.DateTime(calcIST_(startDate)), true);
		        query.setMaximumStartTime(new google.gdata.DateTime(calcIST_(today)), true);
		        calendarService.getEventsFeed(query, function (root) { handleSuccess(root, cityName, eventName); }, function (error) { handleError(error); });
		    }
		    function loadEventsWithDate(form) {
		        var eventName = form.searcheventname.value;
		        var feedUri = 'https://www.google.com/calendar/feeds/indianbridge@gmail.com/public/full';
		        var calendarService = new google.gdata.calendar.CalendarService('Indian Bridge Calendar');
		        //var cityName = prefs.getString("cityname");
		        cityName = "chennai";
		        var query = new google.gdata.calendar.CalendarEventQuery(feedUri);
		        if (cityName != "") query.setFullTextQuery(cityName);
		        query.setOrderBy("starttime");
		        query.setSortOrder("descending");
		        query.setSingleEvents(true);
		        query.setMaxResults(null);
		        var today = new Date(Date.parse(document.getElementById("searchenddate").value));
		        var startDate = new Date(Date.parse(document.getElementById("searchstartdate").value));
		        query.setMinimumStartTime(new google.gdata.DateTime(calcIST_(startDate)), true);
		        query.setMaximumStartTime(new google.gdata.DateTime(calcIST_(today)), true);
		        calendarService.getEventsFeed(query, function (root) { handleSuccess(root, cityName, eventName); }, function (error) { handleError(error); });
		    }
		    function calcIST_(dStr) {
		        if (!dStr) return null;
		        var d = (typeof (dStr) == "string" ? new Date(Date.parse(dStr)) : dStr);
		        utc = d.getTime() + (d.getTimezoneOffset() * 60000);
		        nd = new Date(utc + (3600000 * 5.5));
		        return nd;
		    }
		    function handleSuccess(root, cityName, eventName) {
		        var html = "<h4>Events held in the last 30 days in " + cityName + "</h4>";
		        html += makeTablePreamble_();
		        html += "<thead>";
		        html += makeTableHeader_(["Event Name", "Event Date", "Results Link"]);
		        html += "</thead><tbody>";
		        var eventEntries = root.feed.getEntries();
		        var filteredEvents = new Array();
		        for (var i = 0; i < eventEntries.length; i++) {
		            var event = eventEntries[i];
		            var re = new RegExp(eventName, "i");
		            if (event.getTitle().getText().search(re) != -1) filteredEvents.push(event);
		        }

		        if (filteredEvents.length > 0) {
		            for (var i = 0; i < filteredEvents.length; i++) {
		                var event = filteredEvents[i];
		                var re = new RegExp(eventName, "i");
		                var resultsLink = getResultsURL(event);
		                html += "<tr>" + makeTableCell_([event.getTitle().getText(), event.getTimes()[0].getStartTime().getDate().toDateString(), (resultsLink ? '<a target="_blank" href="' + resultsLink + '">Results</a>' : '<img title="Not Published" src="http://indianbridgefiles.appspot.com/images/publish_x.png" alt="Not Published"/>')], i) + "</tr>";
		            }
		            html += '</tbody></table>';
		        } else {
		            html = "<h2>No Events found matching selected criteria in Indian Bridge Calendar!!!</h2>";
		        }
		        document.getElementById('recent-results').innerHTML = html;
		    }
		    function handleError(error) { document.getElementById('recent-results').innerHTML = '<h4>' + error + '</h4>'; }
		    function makeTablePreamble_() { return "<table style=\'font-size:small;border: 1px solid #cef;text-align: left;\'>"; }
		    function makeTableHeader_(text) { if (typeof (text) == "object") { var retVal = ""; for (var i = 0; i < text.length; ++i) retVal += makeTableHeader_(text[i]); return retVal; } else return "<th style=\'font-weight: bold;background-color: #acf;border-bottom: 1px solid #cef;padding: 0;\'>" + text + "</th>"; }
		    function makeTableCell_(text, row) { if (typeof (text) == "object") { var retVal = ""; for (var i = 0; i < text.length; ++i) retVal += makeTableCell_(text[i], row); return retVal; } if (row % 2 == 0) return "<td style=\'padding: 0;background-color: #def; border-bottom: 1px solid #cef;\'>" + text + "</td>"; else return "<td style=\'padding: 0;\'>" + text + "</td>"; }
		    function getResultsURL(event) {
		        var text = event.getContent().getText();
		        var patternString = "(result|results)\\s*:\\s*([^\\s\\n\\t\\f\\v\\0]*)";
		        var pattern = new RegExp(patternString, "i");
		        var match = pattern.exec(text);
		        if (match != null) {
		            var ret = (isURL(match[2]) ? match[2] : event.getHtmlLink().getHref());
		            return ret;
		        }
		        var patt1Str = "<a([^>]+)>\\s*(results|result)\\s*</a>";
		        var patt1 = new RegExp(patt1Str, "i");
		        var match = patt1.exec(text);
		        if (match == null) return null;
		        var patt2Str = "href\\s*=\\s*(\"([^\"]*)\"|'([^']*)'|([^'\">\\s]+))";
		        var patt2 = new RegExp(patt2Str, "i");
		        match = patt2.exec(match[1]);
		        if (match == null) return null;
		        if (typeof (match[3]) != "undefined") return match[3];
		        if (typeof (match[2]) != "undefined") return match[2];
		        if (typeof (match[1]) != "undefined") return match[1];
		        return null;
		    };
		    function isURL(s) {
		        var regexp = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/i;
		        return regexp.test(s);
		    };      
		</script>

		]]>
	</Content> 
</Module>